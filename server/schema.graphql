type Schema {
  query: Query
  mutation: Mutation
}

type Query {
  getUserData(user: String!): UserData
  getPrivateChat(chatID: Int!): PrivateChat
  getTrade(trade: String!): Trade
  test: String!
}

type Mutation {
  editUser: String
}

#TypeDefs

type UserData {
  username: String!
  trainerID: Int
  trainerName: String
  mtgoID: String
  mtgoName: String
  latitude: Int
  longitude: Int
  buyerRating: Int!
  numBuyRatings: Int!
  sellerRating: Int!
  numSellRatings: Int!
  numOfStrikes: Int!
  privateChat: [PrivateChat]
}

type PrivateChat {
  id: Int
  seller: String!
  buyer: String!
  history(id: Int): [Message!]
}

type Message {
  messageID: Int!
  chatId: Int!
  from: String!
  to: String!
  content: String!
  publishDate: String!
}

type Trade {
  tradeID: Int!
  publishDate: Int!
  numViews: Int
  expirationDate: Int!
  seller: String!
  tradeItemID: String!
  tradeItemVariableData: PokeVariableData!
  price: Int
  tax: Int
  buyer: String!
  offerItemId: String!
  offerItemVariableData: PokeVariableData!
  tradeComplete: Boolean!
}

type PokeVariableData {
  pokeLvl: Int!
  fastMove: String!
  chargeMove: String!
  isShiny: Boolean!
  appraisal: Int!
}

type PokeConstData {
  id: String!
  name: String!
  pokeNum: Int!
  sprite: String
  generation: Int!
}

type UserCredentials {
  userID: String!
  email: String!
  username: String!
  password: String!
  signUpDate: Int
}
